# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: DeviceServiceNb.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import DeviceProto_pb2 as DeviceProto__pb2
import DeviceEnumsProto_pb2 as DeviceEnumsProto__pb2
import PortStatisticsProto_pb2 as PortStatisticsProto__pb2
import PortProto_pb2 as PortProto__pb2
import ConnectPointProto_pb2 as ConnectPointProto__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='DeviceServiceNb.proto',
  package='nb.net.device',
  syntax='proto3',
  serialized_pb=_b('\n\x15\x44\x65viceServiceNb.proto\x12\rnb.net.device\x1a\x11\x44\x65viceProto.proto\x1a\x16\x44\x65viceEnumsProto.proto\x1a\x19PortStatisticsProto.proto\x1a\x0fPortProto.proto\x1a\x17\x43onnectPointProto.proto\"\x17\n\x15getDeviceCountRequest\"+\n\x13getDeviceCountReply\x12\x14\n\x0c\x64\x65vice_count\x18\x01 \x01(\x05\"\x13\n\x11getDevicesRequest\"3\n\x0fgetDevicesReply\x12 \n\x06\x64\x65vice\x18\x01 \x03(\x0b\x32\x10.net.DeviceProto\"<\n\x18getAvailableDevicesReply\x12 \n\x06\x64\x65vice\x18\x01 \x03(\x0b\x32\x10.net.DeviceProto\"G\n\x1agetAvailableDevicesRequest\x12)\n\x04type\x18\x01 \x01(\x0e\x32\x1b.net.device.DeviceTypeProto\"%\n\x10getDeviceRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"2\n\x0egetDeviceReply\x12 \n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32\x10.net.DeviceProto\"#\n\x0egetRoleRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"=\n\x0cgetRoleReply\x12-\n\x04role\x18\x01 \x01(\x0e\x32\x1f.net.device.MastershipRoleProto\"$\n\x0fgetPortsRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"-\n\rgetPortsReply\x12\x1c\n\x04port\x18\x01 \x03(\x0b\x32\x0e.net.PortProto\"-\n\x18getPortStatisticsRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"R\n\x16getPortStatisticsReply\x12\x38\n\x0fport_statistics\x18\x01 \x03(\x0b\x32\x1f.net.device.PortStatisticsProto\"2\n\x1dgetPortDeltaStatisticsRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"W\n\x1bgetPortDeltaStatisticsReply\x12\x38\n\x0fport_statistics\x18\x01 \x03(\x0b\x32\x1f.net.device.PortStatisticsProto\"E\n\x1bgetStatisticsForPortRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\x12\x13\n\x0bport_number\x18\x02 \x01(\x04\"U\n\x19getStatisticsForPortReply\x12\x38\n\x0fport_statistics\x18\x01 \x01(\x0b\x32\x1f.net.device.PortStatisticsProto\"J\n getDeltaStatisticsForPortRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\x12\x13\n\x0bport_number\x18\x02 \x01(\x04\"Z\n\x1egetDeltaStatisticsForPortReply\x12\x38\n\x0fport_statistics\x18\x01 \x01(\x0b\x32\x1f.net.device.PortStatisticsProto\"?\n\x0egetPortRequest\x12-\n\rconnect_point\x18\x01 \x01(\x0b\x32\x16.net.ConnectPointProto\",\n\x0cgetPortReply\x12\x1c\n\x04port\x18\x01 \x01(\x0b\x32\x0e.net.PortProto\"\'\n\x12isAvailableRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"(\n\x10isAvailableReply\x12\x14\n\x0cis_available\x18\x01 \x01(\x08\"\'\n\x12localStatusRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\t\"\"\n\x10localStatusReply\x12\x0e\n\x06status\x18\x01 \x01(\t2\xcf\t\n\rDeviceService\x12\\\n\x0egetDeviceCount\x12$.nb.net.device.getDeviceCountRequest\x1a\".nb.net.device.getDeviceCountReply\"\x00\x12P\n\ngetDevices\x12 .nb.net.device.getDevicesRequest\x1a\x1e.nb.net.device.getDevicesReply\"\x00\x12k\n\x13getAvailableDevices\x12).nb.net.device.getAvailableDevicesRequest\x1a\'.nb.net.device.getAvailableDevicesReply\"\x00\x12M\n\tgetDevice\x12\x1f.nb.net.device.getDeviceRequest\x1a\x1d.nb.net.device.getDeviceReply\"\x00\x12G\n\x07getRole\x12\x1d.nb.net.device.getRoleRequest\x1a\x1b.nb.net.device.getRoleReply\"\x00\x12J\n\x08getPorts\x12\x1e.nb.net.device.getPortsRequest\x1a\x1c.nb.net.device.getPortsReply\"\x00\x12\x65\n\x11getPortStatistics\x12\'.nb.net.device.getPortStatisticsRequest\x1a%.nb.net.device.getPortStatisticsReply\"\x00\x12t\n\x16getPortDeltaStatistics\x12,.nb.net.device.getPortDeltaStatisticsRequest\x1a*.nb.net.device.getPortDeltaStatisticsReply\"\x00\x12n\n\x14getStatisticsForPort\x12*.nb.net.device.getStatisticsForPortRequest\x1a(.nb.net.device.getStatisticsForPortReply\"\x00\x12}\n\x19getDeltaStatisticsForPort\x12/.nb.net.device.getDeltaStatisticsForPortRequest\x1a-.nb.net.device.getDeltaStatisticsForPortReply\"\x00\x12G\n\x07getPort\x12\x1d.nb.net.device.getPortRequest\x1a\x1b.nb.net.device.getPortReply\"\x00\x12S\n\x0bisAvailable\x12!.nb.net.device.isAvailableRequest\x1a\x1f.nb.net.device.isAvailableReply\"\x00\x12S\n\x0blocalStatus\x12!.nb.net.device.localStatusRequest\x1a\x1f.nb.net.device.localStatusReply\"\x00\x42$\n\"org.onosproject.grpc.nb.net.deviceb\x06proto3')
  ,
  dependencies=[DeviceProto__pb2.DESCRIPTOR,DeviceEnumsProto__pb2.DESCRIPTOR,PortStatisticsProto__pb2.DESCRIPTOR,PortProto__pb2.DESCRIPTOR,ConnectPointProto__pb2.DESCRIPTOR,])




_GETDEVICECOUNTREQUEST = _descriptor.Descriptor(
  name='getDeviceCountRequest',
  full_name='nb.net.device.getDeviceCountRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=152,
  serialized_end=175,
)


_GETDEVICECOUNTREPLY = _descriptor.Descriptor(
  name='getDeviceCountReply',
  full_name='nb.net.device.getDeviceCountReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_count', full_name='nb.net.device.getDeviceCountReply.device_count', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=177,
  serialized_end=220,
)


_GETDEVICESREQUEST = _descriptor.Descriptor(
  name='getDevicesRequest',
  full_name='nb.net.device.getDevicesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=222,
  serialized_end=241,
)


_GETDEVICESREPLY = _descriptor.Descriptor(
  name='getDevicesReply',
  full_name='nb.net.device.getDevicesReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device', full_name='nb.net.device.getDevicesReply.device', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=243,
  serialized_end=294,
)


_GETAVAILABLEDEVICESREPLY = _descriptor.Descriptor(
  name='getAvailableDevicesReply',
  full_name='nb.net.device.getAvailableDevicesReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device', full_name='nb.net.device.getAvailableDevicesReply.device', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=296,
  serialized_end=356,
)


_GETAVAILABLEDEVICESREQUEST = _descriptor.Descriptor(
  name='getAvailableDevicesRequest',
  full_name='nb.net.device.getAvailableDevicesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='nb.net.device.getAvailableDevicesRequest.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=358,
  serialized_end=429,
)


_GETDEVICEREQUEST = _descriptor.Descriptor(
  name='getDeviceRequest',
  full_name='nb.net.device.getDeviceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getDeviceRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=431,
  serialized_end=468,
)


_GETDEVICEREPLY = _descriptor.Descriptor(
  name='getDeviceReply',
  full_name='nb.net.device.getDeviceReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device', full_name='nb.net.device.getDeviceReply.device', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=470,
  serialized_end=520,
)


_GETROLEREQUEST = _descriptor.Descriptor(
  name='getRoleRequest',
  full_name='nb.net.device.getRoleRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getRoleRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=522,
  serialized_end=557,
)


_GETROLEREPLY = _descriptor.Descriptor(
  name='getRoleReply',
  full_name='nb.net.device.getRoleReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='role', full_name='nb.net.device.getRoleReply.role', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=559,
  serialized_end=620,
)


_GETPORTSREQUEST = _descriptor.Descriptor(
  name='getPortsRequest',
  full_name='nb.net.device.getPortsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getPortsRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=622,
  serialized_end=658,
)


_GETPORTSREPLY = _descriptor.Descriptor(
  name='getPortsReply',
  full_name='nb.net.device.getPortsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port', full_name='nb.net.device.getPortsReply.port', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=660,
  serialized_end=705,
)


_GETPORTSTATISTICSREQUEST = _descriptor.Descriptor(
  name='getPortStatisticsRequest',
  full_name='nb.net.device.getPortStatisticsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getPortStatisticsRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=707,
  serialized_end=752,
)


_GETPORTSTATISTICSREPLY = _descriptor.Descriptor(
  name='getPortStatisticsReply',
  full_name='nb.net.device.getPortStatisticsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port_statistics', full_name='nb.net.device.getPortStatisticsReply.port_statistics', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=754,
  serialized_end=836,
)


_GETPORTDELTASTATISTICSREQUEST = _descriptor.Descriptor(
  name='getPortDeltaStatisticsRequest',
  full_name='nb.net.device.getPortDeltaStatisticsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getPortDeltaStatisticsRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=838,
  serialized_end=888,
)


_GETPORTDELTASTATISTICSREPLY = _descriptor.Descriptor(
  name='getPortDeltaStatisticsReply',
  full_name='nb.net.device.getPortDeltaStatisticsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port_statistics', full_name='nb.net.device.getPortDeltaStatisticsReply.port_statistics', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=890,
  serialized_end=977,
)


_GETSTATISTICSFORPORTREQUEST = _descriptor.Descriptor(
  name='getStatisticsForPortRequest',
  full_name='nb.net.device.getStatisticsForPortRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getStatisticsForPortRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port_number', full_name='nb.net.device.getStatisticsForPortRequest.port_number', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=979,
  serialized_end=1048,
)


_GETSTATISTICSFORPORTREPLY = _descriptor.Descriptor(
  name='getStatisticsForPortReply',
  full_name='nb.net.device.getStatisticsForPortReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port_statistics', full_name='nb.net.device.getStatisticsForPortReply.port_statistics', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1050,
  serialized_end=1135,
)


_GETDELTASTATISTICSFORPORTREQUEST = _descriptor.Descriptor(
  name='getDeltaStatisticsForPortRequest',
  full_name='nb.net.device.getDeltaStatisticsForPortRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.getDeltaStatisticsForPortRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port_number', full_name='nb.net.device.getDeltaStatisticsForPortRequest.port_number', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1137,
  serialized_end=1211,
)


_GETDELTASTATISTICSFORPORTREPLY = _descriptor.Descriptor(
  name='getDeltaStatisticsForPortReply',
  full_name='nb.net.device.getDeltaStatisticsForPortReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port_statistics', full_name='nb.net.device.getDeltaStatisticsForPortReply.port_statistics', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1213,
  serialized_end=1303,
)


_GETPORTREQUEST = _descriptor.Descriptor(
  name='getPortRequest',
  full_name='nb.net.device.getPortRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='connect_point', full_name='nb.net.device.getPortRequest.connect_point', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1305,
  serialized_end=1368,
)


_GETPORTREPLY = _descriptor.Descriptor(
  name='getPortReply',
  full_name='nb.net.device.getPortReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port', full_name='nb.net.device.getPortReply.port', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1370,
  serialized_end=1414,
)


_ISAVAILABLEREQUEST = _descriptor.Descriptor(
  name='isAvailableRequest',
  full_name='nb.net.device.isAvailableRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.isAvailableRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1416,
  serialized_end=1455,
)


_ISAVAILABLEREPLY = _descriptor.Descriptor(
  name='isAvailableReply',
  full_name='nb.net.device.isAvailableReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='is_available', full_name='nb.net.device.isAvailableReply.is_available', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1457,
  serialized_end=1497,
)


_LOCALSTATUSREQUEST = _descriptor.Descriptor(
  name='localStatusRequest',
  full_name='nb.net.device.localStatusRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='nb.net.device.localStatusRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1499,
  serialized_end=1538,
)


_LOCALSTATUSREPLY = _descriptor.Descriptor(
  name='localStatusReply',
  full_name='nb.net.device.localStatusReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='nb.net.device.localStatusReply.status', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1540,
  serialized_end=1574,
)

_GETDEVICESREPLY.fields_by_name['device'].message_type = DeviceProto__pb2._DEVICEPROTO
_GETAVAILABLEDEVICESREPLY.fields_by_name['device'].message_type = DeviceProto__pb2._DEVICEPROTO
_GETAVAILABLEDEVICESREQUEST.fields_by_name['type'].enum_type = DeviceEnumsProto__pb2._DEVICETYPEPROTO
_GETDEVICEREPLY.fields_by_name['device'].message_type = DeviceProto__pb2._DEVICEPROTO
_GETROLEREPLY.fields_by_name['role'].enum_type = DeviceEnumsProto__pb2._MASTERSHIPROLEPROTO
_GETPORTSREPLY.fields_by_name['port'].message_type = PortProto__pb2._PORTPROTO
_GETPORTSTATISTICSREPLY.fields_by_name['port_statistics'].message_type = PortStatisticsProto__pb2._PORTSTATISTICSPROTO
_GETPORTDELTASTATISTICSREPLY.fields_by_name['port_statistics'].message_type = PortStatisticsProto__pb2._PORTSTATISTICSPROTO
_GETSTATISTICSFORPORTREPLY.fields_by_name['port_statistics'].message_type = PortStatisticsProto__pb2._PORTSTATISTICSPROTO
_GETDELTASTATISTICSFORPORTREPLY.fields_by_name['port_statistics'].message_type = PortStatisticsProto__pb2._PORTSTATISTICSPROTO
_GETPORTREQUEST.fields_by_name['connect_point'].message_type = ConnectPointProto__pb2._CONNECTPOINTPROTO
_GETPORTREPLY.fields_by_name['port'].message_type = PortProto__pb2._PORTPROTO
DESCRIPTOR.message_types_by_name['getDeviceCountRequest'] = _GETDEVICECOUNTREQUEST
DESCRIPTOR.message_types_by_name['getDeviceCountReply'] = _GETDEVICECOUNTREPLY
DESCRIPTOR.message_types_by_name['getDevicesRequest'] = _GETDEVICESREQUEST
DESCRIPTOR.message_types_by_name['getDevicesReply'] = _GETDEVICESREPLY
DESCRIPTOR.message_types_by_name['getAvailableDevicesReply'] = _GETAVAILABLEDEVICESREPLY
DESCRIPTOR.message_types_by_name['getAvailableDevicesRequest'] = _GETAVAILABLEDEVICESREQUEST
DESCRIPTOR.message_types_by_name['getDeviceRequest'] = _GETDEVICEREQUEST
DESCRIPTOR.message_types_by_name['getDeviceReply'] = _GETDEVICEREPLY
DESCRIPTOR.message_types_by_name['getRoleRequest'] = _GETROLEREQUEST
DESCRIPTOR.message_types_by_name['getRoleReply'] = _GETROLEREPLY
DESCRIPTOR.message_types_by_name['getPortsRequest'] = _GETPORTSREQUEST
DESCRIPTOR.message_types_by_name['getPortsReply'] = _GETPORTSREPLY
DESCRIPTOR.message_types_by_name['getPortStatisticsRequest'] = _GETPORTSTATISTICSREQUEST
DESCRIPTOR.message_types_by_name['getPortStatisticsReply'] = _GETPORTSTATISTICSREPLY
DESCRIPTOR.message_types_by_name['getPortDeltaStatisticsRequest'] = _GETPORTDELTASTATISTICSREQUEST
DESCRIPTOR.message_types_by_name['getPortDeltaStatisticsReply'] = _GETPORTDELTASTATISTICSREPLY
DESCRIPTOR.message_types_by_name['getStatisticsForPortRequest'] = _GETSTATISTICSFORPORTREQUEST
DESCRIPTOR.message_types_by_name['getStatisticsForPortReply'] = _GETSTATISTICSFORPORTREPLY
DESCRIPTOR.message_types_by_name['getDeltaStatisticsForPortRequest'] = _GETDELTASTATISTICSFORPORTREQUEST
DESCRIPTOR.message_types_by_name['getDeltaStatisticsForPortReply'] = _GETDELTASTATISTICSFORPORTREPLY
DESCRIPTOR.message_types_by_name['getPortRequest'] = _GETPORTREQUEST
DESCRIPTOR.message_types_by_name['getPortReply'] = _GETPORTREPLY
DESCRIPTOR.message_types_by_name['isAvailableRequest'] = _ISAVAILABLEREQUEST
DESCRIPTOR.message_types_by_name['isAvailableReply'] = _ISAVAILABLEREPLY
DESCRIPTOR.message_types_by_name['localStatusRequest'] = _LOCALSTATUSREQUEST
DESCRIPTOR.message_types_by_name['localStatusReply'] = _LOCALSTATUSREPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

getDeviceCountRequest = _reflection.GeneratedProtocolMessageType('getDeviceCountRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETDEVICECOUNTREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDeviceCountRequest)
  ))
_sym_db.RegisterMessage(getDeviceCountRequest)

getDeviceCountReply = _reflection.GeneratedProtocolMessageType('getDeviceCountReply', (_message.Message,), dict(
  DESCRIPTOR = _GETDEVICECOUNTREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDeviceCountReply)
  ))
_sym_db.RegisterMessage(getDeviceCountReply)

getDevicesRequest = _reflection.GeneratedProtocolMessageType('getDevicesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETDEVICESREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDevicesRequest)
  ))
_sym_db.RegisterMessage(getDevicesRequest)

getDevicesReply = _reflection.GeneratedProtocolMessageType('getDevicesReply', (_message.Message,), dict(
  DESCRIPTOR = _GETDEVICESREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDevicesReply)
  ))
_sym_db.RegisterMessage(getDevicesReply)

getAvailableDevicesReply = _reflection.GeneratedProtocolMessageType('getAvailableDevicesReply', (_message.Message,), dict(
  DESCRIPTOR = _GETAVAILABLEDEVICESREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getAvailableDevicesReply)
  ))
_sym_db.RegisterMessage(getAvailableDevicesReply)

getAvailableDevicesRequest = _reflection.GeneratedProtocolMessageType('getAvailableDevicesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETAVAILABLEDEVICESREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getAvailableDevicesRequest)
  ))
_sym_db.RegisterMessage(getAvailableDevicesRequest)

getDeviceRequest = _reflection.GeneratedProtocolMessageType('getDeviceRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETDEVICEREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDeviceRequest)
  ))
_sym_db.RegisterMessage(getDeviceRequest)

getDeviceReply = _reflection.GeneratedProtocolMessageType('getDeviceReply', (_message.Message,), dict(
  DESCRIPTOR = _GETDEVICEREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDeviceReply)
  ))
_sym_db.RegisterMessage(getDeviceReply)

getRoleRequest = _reflection.GeneratedProtocolMessageType('getRoleRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETROLEREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getRoleRequest)
  ))
_sym_db.RegisterMessage(getRoleRequest)

getRoleReply = _reflection.GeneratedProtocolMessageType('getRoleReply', (_message.Message,), dict(
  DESCRIPTOR = _GETROLEREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getRoleReply)
  ))
_sym_db.RegisterMessage(getRoleReply)

getPortsRequest = _reflection.GeneratedProtocolMessageType('getPortsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTSREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortsRequest)
  ))
_sym_db.RegisterMessage(getPortsRequest)

getPortsReply = _reflection.GeneratedProtocolMessageType('getPortsReply', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTSREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortsReply)
  ))
_sym_db.RegisterMessage(getPortsReply)

getPortStatisticsRequest = _reflection.GeneratedProtocolMessageType('getPortStatisticsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTSTATISTICSREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortStatisticsRequest)
  ))
_sym_db.RegisterMessage(getPortStatisticsRequest)

getPortStatisticsReply = _reflection.GeneratedProtocolMessageType('getPortStatisticsReply', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTSTATISTICSREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortStatisticsReply)
  ))
_sym_db.RegisterMessage(getPortStatisticsReply)

getPortDeltaStatisticsRequest = _reflection.GeneratedProtocolMessageType('getPortDeltaStatisticsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTDELTASTATISTICSREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortDeltaStatisticsRequest)
  ))
_sym_db.RegisterMessage(getPortDeltaStatisticsRequest)

getPortDeltaStatisticsReply = _reflection.GeneratedProtocolMessageType('getPortDeltaStatisticsReply', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTDELTASTATISTICSREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortDeltaStatisticsReply)
  ))
_sym_db.RegisterMessage(getPortDeltaStatisticsReply)

getStatisticsForPortRequest = _reflection.GeneratedProtocolMessageType('getStatisticsForPortRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSTATISTICSFORPORTREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getStatisticsForPortRequest)
  ))
_sym_db.RegisterMessage(getStatisticsForPortRequest)

getStatisticsForPortReply = _reflection.GeneratedProtocolMessageType('getStatisticsForPortReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSTATISTICSFORPORTREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getStatisticsForPortReply)
  ))
_sym_db.RegisterMessage(getStatisticsForPortReply)

getDeltaStatisticsForPortRequest = _reflection.GeneratedProtocolMessageType('getDeltaStatisticsForPortRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETDELTASTATISTICSFORPORTREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDeltaStatisticsForPortRequest)
  ))
_sym_db.RegisterMessage(getDeltaStatisticsForPortRequest)

getDeltaStatisticsForPortReply = _reflection.GeneratedProtocolMessageType('getDeltaStatisticsForPortReply', (_message.Message,), dict(
  DESCRIPTOR = _GETDELTASTATISTICSFORPORTREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getDeltaStatisticsForPortReply)
  ))
_sym_db.RegisterMessage(getDeltaStatisticsForPortReply)

getPortRequest = _reflection.GeneratedProtocolMessageType('getPortRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortRequest)
  ))
_sym_db.RegisterMessage(getPortRequest)

getPortReply = _reflection.GeneratedProtocolMessageType('getPortReply', (_message.Message,), dict(
  DESCRIPTOR = _GETPORTREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.getPortReply)
  ))
_sym_db.RegisterMessage(getPortReply)

isAvailableRequest = _reflection.GeneratedProtocolMessageType('isAvailableRequest', (_message.Message,), dict(
  DESCRIPTOR = _ISAVAILABLEREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.isAvailableRequest)
  ))
_sym_db.RegisterMessage(isAvailableRequest)

isAvailableReply = _reflection.GeneratedProtocolMessageType('isAvailableReply', (_message.Message,), dict(
  DESCRIPTOR = _ISAVAILABLEREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.isAvailableReply)
  ))
_sym_db.RegisterMessage(isAvailableReply)

localStatusRequest = _reflection.GeneratedProtocolMessageType('localStatusRequest', (_message.Message,), dict(
  DESCRIPTOR = _LOCALSTATUSREQUEST,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.localStatusRequest)
  ))
_sym_db.RegisterMessage(localStatusRequest)

localStatusReply = _reflection.GeneratedProtocolMessageType('localStatusReply', (_message.Message,), dict(
  DESCRIPTOR = _LOCALSTATUSREPLY,
  __module__ = 'DeviceServiceNb_pb2'
  # @@protoc_insertion_point(class_scope:nb.net.device.localStatusReply)
  ))
_sym_db.RegisterMessage(localStatusReply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\"org.onosproject.grpc.nb.net.device'))

_DEVICESERVICE = _descriptor.ServiceDescriptor(
  name='DeviceService',
  full_name='nb.net.device.DeviceService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=1577,
  serialized_end=2808,
  methods=[
  _descriptor.MethodDescriptor(
    name='getDeviceCount',
    full_name='nb.net.device.DeviceService.getDeviceCount',
    index=0,
    containing_service=None,
    input_type=_GETDEVICECOUNTREQUEST,
    output_type=_GETDEVICECOUNTREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getDevices',
    full_name='nb.net.device.DeviceService.getDevices',
    index=1,
    containing_service=None,
    input_type=_GETDEVICESREQUEST,
    output_type=_GETDEVICESREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAvailableDevices',
    full_name='nb.net.device.DeviceService.getAvailableDevices',
    index=2,
    containing_service=None,
    input_type=_GETAVAILABLEDEVICESREQUEST,
    output_type=_GETAVAILABLEDEVICESREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getDevice',
    full_name='nb.net.device.DeviceService.getDevice',
    index=3,
    containing_service=None,
    input_type=_GETDEVICEREQUEST,
    output_type=_GETDEVICEREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getRole',
    full_name='nb.net.device.DeviceService.getRole',
    index=4,
    containing_service=None,
    input_type=_GETROLEREQUEST,
    output_type=_GETROLEREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getPorts',
    full_name='nb.net.device.DeviceService.getPorts',
    index=5,
    containing_service=None,
    input_type=_GETPORTSREQUEST,
    output_type=_GETPORTSREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getPortStatistics',
    full_name='nb.net.device.DeviceService.getPortStatistics',
    index=6,
    containing_service=None,
    input_type=_GETPORTSTATISTICSREQUEST,
    output_type=_GETPORTSTATISTICSREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getPortDeltaStatistics',
    full_name='nb.net.device.DeviceService.getPortDeltaStatistics',
    index=7,
    containing_service=None,
    input_type=_GETPORTDELTASTATISTICSREQUEST,
    output_type=_GETPORTDELTASTATISTICSREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getStatisticsForPort',
    full_name='nb.net.device.DeviceService.getStatisticsForPort',
    index=8,
    containing_service=None,
    input_type=_GETSTATISTICSFORPORTREQUEST,
    output_type=_GETSTATISTICSFORPORTREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getDeltaStatisticsForPort',
    full_name='nb.net.device.DeviceService.getDeltaStatisticsForPort',
    index=9,
    containing_service=None,
    input_type=_GETDELTASTATISTICSFORPORTREQUEST,
    output_type=_GETDELTASTATISTICSFORPORTREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getPort',
    full_name='nb.net.device.DeviceService.getPort',
    index=10,
    containing_service=None,
    input_type=_GETPORTREQUEST,
    output_type=_GETPORTREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='isAvailable',
    full_name='nb.net.device.DeviceService.isAvailable',
    index=11,
    containing_service=None,
    input_type=_ISAVAILABLEREQUEST,
    output_type=_ISAVAILABLEREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='localStatus',
    full_name='nb.net.device.DeviceService.localStatus',
    index=12,
    containing_service=None,
    input_type=_LOCALSTATUSREQUEST,
    output_type=_LOCALSTATUSREPLY,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_DEVICESERVICE)

DESCRIPTOR.services_by_name['DeviceService'] = _DEVICESERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class DeviceServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.getDeviceCount = channel.unary_unary(
          '/nb.net.device.DeviceService/getDeviceCount',
          request_serializer=getDeviceCountRequest.SerializeToString,
          response_deserializer=getDeviceCountReply.FromString,
          )
      self.getDevices = channel.unary_unary(
          '/nb.net.device.DeviceService/getDevices',
          request_serializer=getDevicesRequest.SerializeToString,
          response_deserializer=getDevicesReply.FromString,
          )
      self.getAvailableDevices = channel.unary_unary(
          '/nb.net.device.DeviceService/getAvailableDevices',
          request_serializer=getAvailableDevicesRequest.SerializeToString,
          response_deserializer=getAvailableDevicesReply.FromString,
          )
      self.getDevice = channel.unary_unary(
          '/nb.net.device.DeviceService/getDevice',
          request_serializer=getDeviceRequest.SerializeToString,
          response_deserializer=getDeviceReply.FromString,
          )
      self.getRole = channel.unary_unary(
          '/nb.net.device.DeviceService/getRole',
          request_serializer=getRoleRequest.SerializeToString,
          response_deserializer=getRoleReply.FromString,
          )
      self.getPorts = channel.unary_unary(
          '/nb.net.device.DeviceService/getPorts',
          request_serializer=getPortsRequest.SerializeToString,
          response_deserializer=getPortsReply.FromString,
          )
      self.getPortStatistics = channel.unary_unary(
          '/nb.net.device.DeviceService/getPortStatistics',
          request_serializer=getPortStatisticsRequest.SerializeToString,
          response_deserializer=getPortStatisticsReply.FromString,
          )
      self.getPortDeltaStatistics = channel.unary_unary(
          '/nb.net.device.DeviceService/getPortDeltaStatistics',
          request_serializer=getPortDeltaStatisticsRequest.SerializeToString,
          response_deserializer=getPortDeltaStatisticsReply.FromString,
          )
      self.getStatisticsForPort = channel.unary_unary(
          '/nb.net.device.DeviceService/getStatisticsForPort',
          request_serializer=getStatisticsForPortRequest.SerializeToString,
          response_deserializer=getStatisticsForPortReply.FromString,
          )
      self.getDeltaStatisticsForPort = channel.unary_unary(
          '/nb.net.device.DeviceService/getDeltaStatisticsForPort',
          request_serializer=getDeltaStatisticsForPortRequest.SerializeToString,
          response_deserializer=getDeltaStatisticsForPortReply.FromString,
          )
      self.getPort = channel.unary_unary(
          '/nb.net.device.DeviceService/getPort',
          request_serializer=getPortRequest.SerializeToString,
          response_deserializer=getPortReply.FromString,
          )
      self.isAvailable = channel.unary_unary(
          '/nb.net.device.DeviceService/isAvailable',
          request_serializer=isAvailableRequest.SerializeToString,
          response_deserializer=isAvailableReply.FromString,
          )
      self.localStatus = channel.unary_unary(
          '/nb.net.device.DeviceService/localStatus',
          request_serializer=localStatusRequest.SerializeToString,
          response_deserializer=localStatusReply.FromString,
          )


  class DeviceServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def getDeviceCount(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDevices(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAvailableDevices(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDevice(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getRole(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getPorts(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getPortStatistics(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getPortDeltaStatistics(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getStatisticsForPort(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDeltaStatisticsForPort(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getPort(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isAvailable(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def localStatus(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'getDeviceCount': grpc.unary_unary_rpc_method_handler(
            servicer.getDeviceCount,
            request_deserializer=getDeviceCountRequest.FromString,
            response_serializer=getDeviceCountReply.SerializeToString,
        ),
        'getDevices': grpc.unary_unary_rpc_method_handler(
            servicer.getDevices,
            request_deserializer=getDevicesRequest.FromString,
            response_serializer=getDevicesReply.SerializeToString,
        ),
        'getAvailableDevices': grpc.unary_unary_rpc_method_handler(
            servicer.getAvailableDevices,
            request_deserializer=getAvailableDevicesRequest.FromString,
            response_serializer=getAvailableDevicesReply.SerializeToString,
        ),
        'getDevice': grpc.unary_unary_rpc_method_handler(
            servicer.getDevice,
            request_deserializer=getDeviceRequest.FromString,
            response_serializer=getDeviceReply.SerializeToString,
        ),
        'getRole': grpc.unary_unary_rpc_method_handler(
            servicer.getRole,
            request_deserializer=getRoleRequest.FromString,
            response_serializer=getRoleReply.SerializeToString,
        ),
        'getPorts': grpc.unary_unary_rpc_method_handler(
            servicer.getPorts,
            request_deserializer=getPortsRequest.FromString,
            response_serializer=getPortsReply.SerializeToString,
        ),
        'getPortStatistics': grpc.unary_unary_rpc_method_handler(
            servicer.getPortStatistics,
            request_deserializer=getPortStatisticsRequest.FromString,
            response_serializer=getPortStatisticsReply.SerializeToString,
        ),
        'getPortDeltaStatistics': grpc.unary_unary_rpc_method_handler(
            servicer.getPortDeltaStatistics,
            request_deserializer=getPortDeltaStatisticsRequest.FromString,
            response_serializer=getPortDeltaStatisticsReply.SerializeToString,
        ),
        'getStatisticsForPort': grpc.unary_unary_rpc_method_handler(
            servicer.getStatisticsForPort,
            request_deserializer=getStatisticsForPortRequest.FromString,
            response_serializer=getStatisticsForPortReply.SerializeToString,
        ),
        'getDeltaStatisticsForPort': grpc.unary_unary_rpc_method_handler(
            servicer.getDeltaStatisticsForPort,
            request_deserializer=getDeltaStatisticsForPortRequest.FromString,
            response_serializer=getDeltaStatisticsForPortReply.SerializeToString,
        ),
        'getPort': grpc.unary_unary_rpc_method_handler(
            servicer.getPort,
            request_deserializer=getPortRequest.FromString,
            response_serializer=getPortReply.SerializeToString,
        ),
        'isAvailable': grpc.unary_unary_rpc_method_handler(
            servicer.isAvailable,
            request_deserializer=isAvailableRequest.FromString,
            response_serializer=isAvailableReply.SerializeToString,
        ),
        'localStatus': grpc.unary_unary_rpc_method_handler(
            servicer.localStatus,
            request_deserializer=localStatusRequest.FromString,
            response_serializer=localStatusReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'nb.net.device.DeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaDeviceServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def getDeviceCount(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDevices(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAvailableDevices(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDevice(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getRole(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getPorts(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getPortStatistics(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getPortDeltaStatistics(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getStatisticsForPort(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDeltaStatisticsForPort(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getPort(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isAvailable(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def localStatus(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDeviceServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def getDeviceCount(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getDeviceCount.future = None
    def getDevices(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getDevices.future = None
    def getAvailableDevices(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getAvailableDevices.future = None
    def getDevice(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getDevice.future = None
    def getRole(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getRole.future = None
    def getPorts(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getPorts.future = None
    def getPortStatistics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getPortStatistics.future = None
    def getPortDeltaStatistics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getPortDeltaStatistics.future = None
    def getStatisticsForPort(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getStatisticsForPort.future = None
    def getDeltaStatisticsForPort(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getDeltaStatisticsForPort.future = None
    def getPort(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getPort.future = None
    def isAvailable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    isAvailable.future = None
    def localStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    localStatus.future = None


  def beta_create_DeviceService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('nb.net.device.DeviceService', 'getAvailableDevices'): getAvailableDevicesRequest.FromString,
      ('nb.net.device.DeviceService', 'getDeltaStatisticsForPort'): getDeltaStatisticsForPortRequest.FromString,
      ('nb.net.device.DeviceService', 'getDevice'): getDeviceRequest.FromString,
      ('nb.net.device.DeviceService', 'getDeviceCount'): getDeviceCountRequest.FromString,
      ('nb.net.device.DeviceService', 'getDevices'): getDevicesRequest.FromString,
      ('nb.net.device.DeviceService', 'getPort'): getPortRequest.FromString,
      ('nb.net.device.DeviceService', 'getPortDeltaStatistics'): getPortDeltaStatisticsRequest.FromString,
      ('nb.net.device.DeviceService', 'getPortStatistics'): getPortStatisticsRequest.FromString,
      ('nb.net.device.DeviceService', 'getPorts'): getPortsRequest.FromString,
      ('nb.net.device.DeviceService', 'getRole'): getRoleRequest.FromString,
      ('nb.net.device.DeviceService', 'getStatisticsForPort'): getStatisticsForPortRequest.FromString,
      ('nb.net.device.DeviceService', 'isAvailable'): isAvailableRequest.FromString,
      ('nb.net.device.DeviceService', 'localStatus'): localStatusRequest.FromString,
    }
    response_serializers = {
      ('nb.net.device.DeviceService', 'getAvailableDevices'): getAvailableDevicesReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getDeltaStatisticsForPort'): getDeltaStatisticsForPortReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getDevice'): getDeviceReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getDeviceCount'): getDeviceCountReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getDevices'): getDevicesReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getPort'): getPortReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getPortDeltaStatistics'): getPortDeltaStatisticsReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getPortStatistics'): getPortStatisticsReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getPorts'): getPortsReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getRole'): getRoleReply.SerializeToString,
      ('nb.net.device.DeviceService', 'getStatisticsForPort'): getStatisticsForPortReply.SerializeToString,
      ('nb.net.device.DeviceService', 'isAvailable'): isAvailableReply.SerializeToString,
      ('nb.net.device.DeviceService', 'localStatus'): localStatusReply.SerializeToString,
    }
    method_implementations = {
      ('nb.net.device.DeviceService', 'getAvailableDevices'): face_utilities.unary_unary_inline(servicer.getAvailableDevices),
      ('nb.net.device.DeviceService', 'getDeltaStatisticsForPort'): face_utilities.unary_unary_inline(servicer.getDeltaStatisticsForPort),
      ('nb.net.device.DeviceService', 'getDevice'): face_utilities.unary_unary_inline(servicer.getDevice),
      ('nb.net.device.DeviceService', 'getDeviceCount'): face_utilities.unary_unary_inline(servicer.getDeviceCount),
      ('nb.net.device.DeviceService', 'getDevices'): face_utilities.unary_unary_inline(servicer.getDevices),
      ('nb.net.device.DeviceService', 'getPort'): face_utilities.unary_unary_inline(servicer.getPort),
      ('nb.net.device.DeviceService', 'getPortDeltaStatistics'): face_utilities.unary_unary_inline(servicer.getPortDeltaStatistics),
      ('nb.net.device.DeviceService', 'getPortStatistics'): face_utilities.unary_unary_inline(servicer.getPortStatistics),
      ('nb.net.device.DeviceService', 'getPorts'): face_utilities.unary_unary_inline(servicer.getPorts),
      ('nb.net.device.DeviceService', 'getRole'): face_utilities.unary_unary_inline(servicer.getRole),
      ('nb.net.device.DeviceService', 'getStatisticsForPort'): face_utilities.unary_unary_inline(servicer.getStatisticsForPort),
      ('nb.net.device.DeviceService', 'isAvailable'): face_utilities.unary_unary_inline(servicer.isAvailable),
      ('nb.net.device.DeviceService', 'localStatus'): face_utilities.unary_unary_inline(servicer.localStatus),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DeviceService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('nb.net.device.DeviceService', 'getAvailableDevices'): getAvailableDevicesRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getDeltaStatisticsForPort'): getDeltaStatisticsForPortRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getDevice'): getDeviceRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getDeviceCount'): getDeviceCountRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getDevices'): getDevicesRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getPort'): getPortRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getPortDeltaStatistics'): getPortDeltaStatisticsRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getPortStatistics'): getPortStatisticsRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getPorts'): getPortsRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getRole'): getRoleRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'getStatisticsForPort'): getStatisticsForPortRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'isAvailable'): isAvailableRequest.SerializeToString,
      ('nb.net.device.DeviceService', 'localStatus'): localStatusRequest.SerializeToString,
    }
    response_deserializers = {
      ('nb.net.device.DeviceService', 'getAvailableDevices'): getAvailableDevicesReply.FromString,
      ('nb.net.device.DeviceService', 'getDeltaStatisticsForPort'): getDeltaStatisticsForPortReply.FromString,
      ('nb.net.device.DeviceService', 'getDevice'): getDeviceReply.FromString,
      ('nb.net.device.DeviceService', 'getDeviceCount'): getDeviceCountReply.FromString,
      ('nb.net.device.DeviceService', 'getDevices'): getDevicesReply.FromString,
      ('nb.net.device.DeviceService', 'getPort'): getPortReply.FromString,
      ('nb.net.device.DeviceService', 'getPortDeltaStatistics'): getPortDeltaStatisticsReply.FromString,
      ('nb.net.device.DeviceService', 'getPortStatistics'): getPortStatisticsReply.FromString,
      ('nb.net.device.DeviceService', 'getPorts'): getPortsReply.FromString,
      ('nb.net.device.DeviceService', 'getRole'): getRoleReply.FromString,
      ('nb.net.device.DeviceService', 'getStatisticsForPort'): getStatisticsForPortReply.FromString,
      ('nb.net.device.DeviceService', 'isAvailable'): isAvailableReply.FromString,
      ('nb.net.device.DeviceService', 'localStatus'): localStatusReply.FromString,
    }
    cardinalities = {
      'getAvailableDevices': cardinality.Cardinality.UNARY_UNARY,
      'getDeltaStatisticsForPort': cardinality.Cardinality.UNARY_UNARY,
      'getDevice': cardinality.Cardinality.UNARY_UNARY,
      'getDeviceCount': cardinality.Cardinality.UNARY_UNARY,
      'getDevices': cardinality.Cardinality.UNARY_UNARY,
      'getPort': cardinality.Cardinality.UNARY_UNARY,
      'getPortDeltaStatistics': cardinality.Cardinality.UNARY_UNARY,
      'getPortStatistics': cardinality.Cardinality.UNARY_UNARY,
      'getPorts': cardinality.Cardinality.UNARY_UNARY,
      'getRole': cardinality.Cardinality.UNARY_UNARY,
      'getStatisticsForPort': cardinality.Cardinality.UNARY_UNARY,
      'isAvailable': cardinality.Cardinality.UNARY_UNARY,
      'localStatus': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'nb.net.device.DeviceService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
